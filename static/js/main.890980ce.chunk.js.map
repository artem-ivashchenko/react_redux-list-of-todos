{"version":3,"sources":["features/currentTodo.ts","features/filter.ts","features/todos.ts","app/store.ts","app/hooks.ts","components/TodoList/TodoList.tsx","components/TodoFilter/TodoFilter.tsx","components/Loader/Loader.tsx","api.ts","components/TodoModal/TodoModal.tsx","App.tsx","index.tsx"],"names":["actions","todo","type","payload","currentTodoReducer","state","action","status","query","filterReducer","todos","todosReducer","rootReducer","combineReducers","currentTodo","filter","store","createStore","composeWithDevTools","applyMiddleware","thunk","useAppDispatch","useDispatch","useAppSelector","useSelector","TodoList","dispatch","visibleTodos","todoCopy","completed","Error","title","toLowerCase","includes","trim","getVisibleTodos","length","className","map","id","userId","classNames","onClick","currentTodoActions","TodoFilter","onSubmit","event","preventDefault","value","onChange","filterActions","target","placeholder","style","pointerEvents","Loader","get","url","delay","fullURL","Promise","resolve","setTimeout","then","fetch","res","json","TodoModal","useState","user","setUser","isUserLoading","setIsUserLoading","useEffect","finally","href","email","name","App","isTodosLoading","setIsTodosLoading","todosActions","Root","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.890980ce.chunk.js","sourcesContent":["import { Todo } from '../types/Todo';\n\n// we use string literal as a type to avoid mistype in future\ntype RemoveTodoAction = { type: 'currentTodo/REMOVE' };\n\n// payload is a typical name for an action data\ntype SetTodoAction = {\n  type: 'currentTodo/SET';\n  payload: Todo;\n};\n\n// Action creator return type protect us from a mistype\nconst removeCurrentTodo = (): RemoveTodoAction => ({\n  type: 'currentTodo/REMOVE',\n});\n\nconst setCurrentTodo = (todo: Todo): SetTodoAction => ({\n  type: 'currentTodo/SET',\n  payload: todo,\n});\n\n// These actions will be used in the application\nexport const actions = { setCurrentTodo, removeCurrentTodo };\n\ntype State = Todo | null;\ntype Action = SetTodoAction | RemoveTodoAction;\n\nconst currentTodoReducer = (\n  state: State = null,\n  action: Action,\n): State => {\n  switch (action.type) {\n    case 'currentTodo/REMOVE':\n      return null;\n    case 'currentTodo/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default currentTodoReducer;\n","import { Status } from '../types/Status';\n\ntype SetStatusAction = { type: 'filter/STATUS', payload: Status };\ntype SetQueryAction = { type: 'filter/QUERY', payload: string };\ntype ResetQueryAction = { type: 'filter/RESET_QUERY' };\n\nconst setStatus = (status: Status): SetStatusAction => ({\n  type: 'filter/STATUS', payload: status,\n});\n\nconst setQuery = (query: string): SetQueryAction => ({\n  type: 'filter/QUERY', payload: query,\n});\n\nconst resetQuery = (): ResetQueryAction => ({ type: 'filter/RESET_QUERY' });\n\ntype Action = SetStatusAction | SetQueryAction | ResetQueryAction;\ntype State = {\n  query: string,\n  status: Status\n};\n\nexport const actions = { setStatus, setQuery, resetQuery };\n\nconst filterReducer = (\n  state: State = {\n    query: '',\n    status: 'all',\n  },\n  action: Action,\n) => {\n  switch (action.type) {\n    case 'filter/QUERY':\n      return {\n        ...state,\n        query: action.payload,\n      } as State;\n\n    case 'filter/RESET_QUERY':\n      return {\n        ...state,\n        query: '',\n      };\n\n    case 'filter/STATUS':\n      return {\n        ...state,\n        status: action.payload,\n      } as State;\n\n    default:\n      return state;\n  }\n};\n\nexport default filterReducer;\n","import { Todo } from '../types/Todo';\n\ntype SetTodosAction = { type: 'todos/SET', payload: Todo[] };\n\nconst setTodos = (todos: Todo[]): SetTodosAction => ({\n  type: 'todos/SET', payload: todos,\n});\n\ntype Action = SetTodosAction;\ntype State = Todo[];\n\nexport const actions = { setTodos };\n\nconst todosReducer = (state: State = [], action: Action): State => {\n  switch (action.type) {\n    case 'todos/SET':\n      return action.payload;\n    default:\n      return state;\n  }\n};\n\nexport default todosReducer;\n","import { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\n\nimport currentTodoReducer from '../features/currentTodo';\nimport filterReducer from '../features/filter';\nimport todosReducer from '../features/todos';\n\nconst rootReducer = combineReducers({\n  currentTodo: currentTodoReducer,\n  filter: filterReducer,\n  todos: todosReducer,\n});\n\n// The `store` is passed to the Provider in `/src/index.tsx`\nexport const store = createStore(\n  rootReducer,\n  composeWithDevTools(\n    applyMiddleware(thunk),\n  ),\n);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n","import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux';\nimport { AppDispatch, RootState } from './store';\n\nexport const useAppDispatch: () => AppDispatch = useDispatch;\nexport const useAppSelector: TypedUseSelectorHook<RootState> = useSelector;\n","import React from 'react';\nimport classNames from 'classnames';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\n\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nimport { Todo } from '../../types/Todo';\nimport { Status } from '../../types/Status';\n\nfunction getVisibleTodos(todos: Todo[], query: string, status: Status) {\n  let todoCopy = [...todos];\n\n  switch (status) {\n    case 'active':\n      todoCopy = todoCopy.filter((todo) => !todo.completed);\n      break;\n    case 'completed':\n      todoCopy = todoCopy.filter((todo) => todo.completed);\n      break;\n    case 'all':\n      break;\n    default:\n      throw new Error('There is an issue with status type definition...');\n  }\n\n  if (query) {\n    todoCopy = todoCopy.filter(\n      (todo) => todo.title.toLowerCase().includes(query.toLowerCase().trim()),\n    );\n  }\n\n  return todoCopy;\n}\n\nexport const TodoList: React.FC = () => {\n  const dispatch = useAppDispatch();\n\n  const {\n    todos,\n    filter: { query, status },\n    currentTodo,\n  } = useAppSelector((state) => state);\n\n  const handleTodoSelection = (todo: Todo) => {\n    dispatch(currentTodoActions.setCurrentTodo(todo));\n  };\n\n  const visibleTodos = getVisibleTodos(todos, query, status);\n\n  return (\n    <>\n      {!visibleTodos.length && (\n        <p className=\"notification is-warning\">\n          There are no todos matching current filter criteria\n        </p>\n      )}\n\n      {!!visibleTodos.length && (\n        <table className=\"table is-narrow is-fullwidth\">\n          <thead>\n            <tr>\n              <th>#</th>\n\n              <th>\n                <span className=\"icon\">\n                  <i className=\"fas fa-check\" />\n                </span>\n              </th>\n\n              <th>Title</th>\n              <th> </th>\n            </tr>\n          </thead>\n\n          <tbody>\n            {visibleTodos.map(({\n              id, title, completed, userId,\n            }) => (\n              <tr\n                data-cy=\"todo\"\n                key={id}\n                className={classNames({\n                  'has-background-info-light': currentTodo?.id === id,\n                })}\n              >\n                <td className=\"is-vcentered\">{id}</td>\n                <td className=\"is-vcentered\">\n                  {completed && (\n                    <span className=\"icon\" data-cy=\"iconCompleted\">\n                      <i className=\"fas fa-check\" />\n                    </span>\n                  )}\n                </td>\n\n                <td className=\"is-vcentered is-expanded\">\n                  <p\n                    className={classNames(\n                      completed ? 'has-text-success' : 'has-text-danger',\n                    )}\n                  >\n                    {title}\n                  </p>\n                </td>\n\n                <td className=\"has-text-right is-vcentered\">\n                  <button\n                    data-cy=\"selectButton\"\n                    className=\"button\"\n                    type=\"button\"\n                    onClick={() => handleTodoSelection({\n                      id, title, completed, userId,\n                    } as Todo)}\n                  >\n                    <span className=\"icon\">\n                      <i\n                        className={classNames(\n                          'far',\n                          currentTodo?.id === id ? 'fa-eye-slash' : 'fa-eye',\n                        )}\n                      />\n                    </span>\n                  </button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n    </>\n  );\n};\n","/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React from 'react';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { actions as filterActions } from '../../features/filter';\nimport { Status } from '../../types/Status';\n\nexport const TodoFilter: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const { status, query } = useAppSelector((state) => state.filter);\n\n  const handleStatusChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    dispatch(filterActions.setStatus(event.target.value as Status));\n  };\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    dispatch(filterActions.setQuery(event.target.value));\n  };\n\n  const handleResetQuery = () => dispatch(filterActions.resetQuery());\n\n  return (\n    <form\n      className=\"field has-addons\"\n      onSubmit={(event) => event.preventDefault()}\n    >\n      <p className=\"control\">\n        <span className=\"select\">\n          <select\n            data-cy=\"statusSelect\"\n            value={status}\n            onChange={handleStatusChange}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </span>\n      </p>\n\n      <p className=\"control is-expanded has-icons-left has-icons-right\">\n        <input\n          data-cy=\"searchInput\"\n          type=\"text\"\n          className=\"input\"\n          placeholder=\"Search...\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n        <span className=\"icon is-left\">\n          <i className=\"fas fa-magnifying-glass\" />\n        </span>\n\n        <span className=\"icon is-right\" style={{ pointerEvents: 'all' }}>\n          {query && (\n            <button\n              data-cy=\"clearSearchButton\"\n              type=\"button\"\n              className=\"delete\"\n              onClick={handleResetQuery}\n            />\n          )}\n        </span>\n      </p>\n    </form>\n  );\n};\n","import React from 'react';\nimport './Loader.scss';\n\nexport const Loader: React.FC = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Todo } from './types/Todo';\nimport { User } from './types/User';\n\n// eslint-disable-next-line max-len\nconst BASE_URL = 'https://mate-academy.github.io/react_dynamic-list-of-todos/api';\n\nfunction wait(delay: number): Promise<void> {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\nfunction get<T>(url: string): Promise<T> {\n  // eslint-disable-next-line prefer-template\n  const fullURL = BASE_URL + url + '.json';\n\n  return wait(300)\n    .then(() => fetch(fullURL))\n    .then(res => res.json());\n}\n\nexport const getTodos = () => get<Todo[]>('/todos');\n\nexport const getUser = (userId: number) => get<User>(`/users/${userId}`);\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from '../Loader';\nimport { useAppDispatch, useAppSelector } from '../../app/hooks';\nimport { User } from '../../types/User';\nimport { getUser } from '../../api';\nimport { actions as currentTodoActions } from '../../features/currentTodo';\n\nexport const TodoModal: React.FC = () => {\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector((state) => state.currentTodo);\n\n  const [user, setUser] = useState<User | null>(null);\n  const [isUserLoading, setIsUserLoading] = useState(true);\n\n  const handleModalClose = () => {\n    dispatch(currentTodoActions.removeCurrentTodo());\n  };\n\n  useEffect(() => {\n    if (currentTodo) {\n      getUser(currentTodo.userId)\n        .then(setUser)\n        .finally(() => setIsUserLoading(false));\n    }\n  }, []);\n\n  return (\n    <div className=\"modal is-active\" data-cy=\"modal\">\n      <div className=\"modal-background\" />\n\n      {isUserLoading && <Loader />}\n\n      {!isUserLoading && user && currentTodo && (\n        <div className=\"modal-card\">\n          <header className=\"modal-card-head\">\n            <div\n              className=\"modal-card-title has-text-weight-medium\"\n              data-cy=\"modal-header\"\n            >\n              {`Todo #${currentTodo.id}`}\n            </div>\n\n            {/* eslint-disable-next-line jsx-a11y/control-has-associated-label */}\n            <button\n              type=\"button\"\n              aria-label=\"Close this window\"\n              className=\"delete\"\n              data-cy=\"modal-close\"\n              onClick={handleModalClose}\n            />\n          </header>\n\n          <div className=\"modal-card-body\">\n            <p className=\"block\" data-cy=\"modal-title\">\n              {currentTodo.title}\n            </p>\n\n            <p className=\"block\" data-cy=\"modal-user\">\n              {currentTodo.completed ? (\n                <strong className=\"has-text-success\">Done</strong>\n              ) : (\n                <strong className=\"has-text-danger\">Planned</strong>\n              )}\n              {' by '}\n              <a href={`mailto:${user.email}`}>{user.name}</a>\n            </p>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n","/* eslint-disable max-len */\nimport React, { useEffect, useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { TodoList } from './components/TodoList';\nimport { TodoFilter } from './components/TodoFilter';\nimport { TodoModal } from './components/TodoModal';\nimport { Loader } from './components/Loader';\nimport { useAppDispatch, useAppSelector } from './app/hooks';\nimport { actions as todosActions } from './features/todos';\nimport { getTodos } from './api';\n\nexport const App: React.FC = () => {\n  const [isTodosLoading, setIsTodosLoading] = useState(true);\n  const dispatch = useAppDispatch();\n  const currentTodo = useAppSelector(state => state.currentTodo);\n\n  useEffect(() => {\n    getTodos()\n      .then((todos) => dispatch(todosActions.setTodos(todos)))\n      .finally(() => setIsTodosLoading(false));\n  }, []);\n\n  return (\n    <>\n      <div className=\"section\">\n        <div className=\"container\">\n          <div className=\"box\">\n            <h1 className=\"title\">Todos:</h1>\n\n            <div className=\"block\">\n              <TodoFilter />\n            </div>\n\n            <div className=\"block\">\n              {isTodosLoading\n                ? <Loader />\n                : <TodoList />}\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {currentTodo && <TodoModal />}\n    </>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport { store } from './app/store';\nimport { App } from './App';\n\n// Just a convenient component with all the wrappers for the `App`\n// The Router component (if you use it) should be placed inside the Provider\nconst Root = () => (\n  <Provider store={store}>\n    <Router>\n      <App />\n    </Router>\n  </Provider>\n);\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}